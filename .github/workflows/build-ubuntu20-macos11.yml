name: Build core wallets
on:
  push: 
    branches:
     - ubuntu20build
     - dev 
     - '[0-9].[0-9].[0-9]+'
    tags:
     - build
     - 'v[0-9].[0-9].[0-9]+'
  pull_request:
    branches:
      - dev
jobs:
  linux64:
    runs-on: ubuntu-20.04
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.spacexpanse-params
    defaults:
      run:
        shell: bash        
    steps:
    - run: echo "NOW=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: |
          .ccache
          .spacexpanse-params
        key: x86_64-unknown-linux-gnu-ccache-${{ env.NOW }} 
        restore-keys: |
            x86_64-unknown-linux-gnu-ccache-
    - run: |
        sudo apt-get update
        sudo apt-get upgrade
        sudo apt-get install git build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libminiupnpc-dev libnatpmp-dev libzmq3-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev
        sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libqrencode-dev
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - uses: actions/cache@v3
      with:
        path: |
          depends/built
          depends/work/build
          depends/sdk-sources
          depends/x86_64-unknown-linux-gnu          
        key: ubuntu-20.04-depends-x86_64-unknown-linux-gnu-${{ env.NOW }} 
        restore-keys: ubuntu-20.04-depends-x86_64-unknown-linux-gnu-
    - run: chmod +x ./contrib/install_db4.sh
    - run: ./contrib/install_db4.sh ./       
    - run: ./autogen.sh 
    - run: ./configure BDB_LIBS="-L$GITHUB_WORKSPACE/db4/lib -ldb_cxx-4.8" BDB_CFLAGS="-I$GITHUB_WORKSPACE/db4/include" 
    - run: make -j2
    - run: make deploy 
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        mkdir -p deploy
        cp $GITHUB_WORKSPACE/src/spacexpansed $GITHUB_WORKSPACE/src/spacexpanse-cli $GITHUB_WORKSPACE/src/spacexpanse-tx $GITHUB_WORKSPACE/src/spacexpanse-wallet $GITHUB_WORKSPACE/src/spacexpanse-util $GITHUB_WORKSPACE/src/qt/spacexpanse-qt $GITHUB_WORKSPACE/deploy
        strip $GITHUB_WORKSPACE/deploy/*
        zip -r --junk-paths spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip $GITHUB_WORKSPACE/deploy/*
        ls -lh         
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}.rc1
        release_name: SpaceXpanse ROD core wallet ${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}
        draft: true
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip
        asset_name: spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip
        asset_content_type: application/zip

  win64:

    runs-on: ubuntu-20.04
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.spacexpanse-params
    defaults:
      run:
        shell: bash

    steps:
    - run: echo "NOW=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: |
          .ccache
          .spacexpanse-params
        key: x86_64-w64-mingw32-ccache-${{ env.NOW }} 
        restore-keys: |
            x86_64-w64-mingw32-ccache-
    - run: |
        sudo apt-get update  
        sudo apt-get upgrade  
        sudo apt-get install git build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libminiupnpc-dev libnatpmp-dev libzmq3-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev
        sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libqrencode-dev g++-mingw-w64-x86-64 nsis
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - uses: actions/cache@v3
      with:
        path: |
          depends/built
          depends/sdk-sources
          depends/work/build
          depends/x86_64-w64-mingw32          
        key: ubuntu-20.04-depends-x86_64-w64-mingw32-${{ env.NOW }}
        restore-keys: ubuntu-20.04-depends-x86_64-w64-mingw32-
    - run: |
        #chmod +x ./contrib/install_db4.sh
        #./contrib/install_db4.sh ./     
        export LC_ALL=C.UTF-8
        unset CC CXX DISPLAY                 
        PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g') # strip out problematic Windows %PATH% imported var
    - run: echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-g++            
    - run: sudo bash -c "echo 0 > /proc/sys/fs/binfmt_misc/status" # Disable WSL support for Win32 applications.
    - run: make -j2 -C depends HOST=x86_64-w64-mingw32
      #working-directory: depends
    - run: ./autogen.sh
    - run: CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/ --with-gui=yes LDFLAGS=-Wa,-mbig-obj #CFLAGS=$(DEBUG) -Wall -W -Wwrite-strings LDFLAGS= LIBS=  CFLAGS_C=-Wmissing-prototypes CFLAGS_CXX=-std=c++0x BDB_LIBS="-L$GITHUB_WORKSPACE/db4/lib -ldb_cxx-4.8" BDB_CFLAGS="-I$GITHUB_WORKSPACE/db4/include"
    - run: make -j2
    - run: make deploy 
    - run: sudo bash -c "echo 1 > /proc/sys/fs/binfmt_misc/status" # Enable WSL support for Win32 applications. 
    #- run: ls -lh $GITHUB_WORKSPACE
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        mkdir -p deploy
        cp $GITHUB_WORKSPACE/src/spacexpansed.exe $GITHUB_WORKSPACE/src/spacexpanse-cli.exe $GITHUB_WORKSPACE/src/spacexpanse-tx.exe $GITHUB_WORKSPACE/src/spacexpanse-wallet.exe $GITHUB_WORKSPACE/src/spacexpanse-util.exe $GITHUB_WORKSPACE/src/qt/spacexpanse-qt.exe $GITHUB_WORKSPACE/deploy
        strip $GITHUB_WORKSPACE/deploy/*
        cp $GITHUB_WORKSPACE/spacexpanse-0.6.8.9-win64-setup.exe $GITHUB_WORKSPACE/deploy 
        zip -r --junk-paths spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip $GITHUB_WORKSPACE/deploy/*
        ls -lh         
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}.rc1
        release_name: SpaceXpanse ROD core wallet ${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}
        draft: true
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip
        asset_name: spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip
        asset_content_type: application/zip

  macos:

    runs-on: macos-12
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.spacexpanse-params
    defaults:
      run:
        shell: bash

    steps:
    - run: echo "NOW=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: |
          .ccache
          .spacexpanse-params
        key: x86_64-apple-darwin21-ccache-${{ env.NOW }} 
        restore-keys: |
            x86_64-apple-darwin21-ccache-
    - run: export HOMEBREW_NO_AUTO_UPDATE=1
    - run: export HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS=3650
    - run: |    
        brew install automake libtool boost pkg-config libevent git berkeley-db@4 sqlite qt@5 qrencode miniupnpc libnatpmp zeromq python librsvg
        pip3 install ds_store mac_alias
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - uses: actions/cache@v3
      with:
        path: |
          depends/built
          depends/sdk-sources
          depends/work/build
          depends/x86_64-apple-darwin21          
        key: macos-11-depends-x86_64-apple-darwin21-${{ env.NOW }}
        restore-keys: macos-11-depends-x86_64-apple-darwin21-
    - run: ./autogen.sh
    - run: ./configure --with-gui=yes 
    - run: make -j3
    - run: make deploy 
    #- run: ls -lh 
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        mkdir -p deploy
        cp $GITHUB_WORKSPACE/src/spacexpansed $GITHUB_WORKSPACE/src/spacexpanse-cli $GITHUB_WORKSPACE/src/spacexpanse-tx $GITHUB_WORKSPACE/src/spacexpanse-wallet $GITHUB_WORKSPACE/src/spacexpanse-util $GITHUB_WORKSPACE/src/qt/spacexpanse-qt $GITHUB_WORKSPACE/deploy
        strip $GITHUB_WORKSPACE/deploy/*
        cp -r $GITHUB_WORKSPACE/SpaceXpanse.dmg $GITHUB_WORKSPACE/deploy
        zip -r --junk-paths spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip $GITHUB_WORKSPACE/deploy/*
        ls -lh         
    - name: Create Release  
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}.rc1
        release_name: SpaceXpanse ROD core wallet ${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}
        draft: true
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip
        asset_name: spacexpanse-${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}.zip
        asset_content_type: application/zip

        
